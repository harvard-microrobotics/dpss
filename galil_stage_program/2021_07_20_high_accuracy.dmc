#AUTO
' GitHub Link:
' https://github.com/harvard-microrobotics/dpss
'
' General usage Instructions:
'    0. Home the x-axis: Press and hold "Home Stage" for 3 seconds.
'       (This makes sure you are in camera view)
'    1. Check your origin by cutting a cross, then adjusting
'       the crosshair to where the cross was actually cut.
'    2. NEW: Press and hold the "Zero Origin" button for
'       3 seconds to update the offset variables
'       (instead of manually updating them in the code)
'
' Updating the program
'    1. "Download" the program to the controller
'    2. Execute the program
' 
' Note:
' The program assumes the stage is in camera view upon startup.
' If the stage was unable to move before, jog it over to the
' camera position and zero it. 
'    
'
' SUPERUSER Instructions:
'    1. Open the Terminal ("Tools" >> "Terminal")
'    2. Send the BP Command to "Burn the program".
'       You only need to do this once, but just in case the memory is wiped,
'       now you know how to do it.
'
'
' This is an example of a comment
NO This is also a comment
'
'
MO ;' Turn off the motors until the MT command is issued.
MT -2.5,-2,1,1
CE 0,2
DP 0,0
DE 0,0
curx=0
cury=0
SH
JG 0,0
BG XY
DC 2000000,2000000
AC 2000000,2000000
oncam=1
limithit=0
homing=0
usermove=0
xjoy=0
yjoy=0
currposx=0
currposy=0
homedx=0
homedy=0
SB 1 ;' "CAM VIEW" indicator light on
CB 2 ;' "X-LIMIT" indicator light off
CB 3 ;' "Y-LIMIT" indicator light off
'
' DEFINE OFFSETS - The Offset between cam view and laser positions
deltax=872016;'872304;'873394;'869256;'870517;'871154;'872437 ;' 908400
deltay=7018;'8601;'8336 ;' 9558
xcamhome=-436500
'
'
' DEFINE JOYSTICK PARAMS
joydzone = 0.07
joyhzone = 0.90
'
'
#LOOP
JG ;' Make sure we are in jog mode.
xangle=(@AN[1]-2.69)/2.38;' Calculate the joystick's x-axis position
yangle=(@AN[2]-2.29)/2.42;' Calculate the joystick's y-axis position
'
' Check if the x-axis joystick is moved out of the deadzone
IF (@ABS[xangle]>joydzone)
  xjoy=1
  JP#XNOTLOW
ELSE
  xjoy=0
  xangle=0
ENDIF
' Check if the x-axis joystick is pushed past the high-level
#XNOTLOW
IF (@ABS[xangle]>joyhzone)
  xangle=joyhzone*xangle/@ABS[xangle]
ELSE
  JP#XNOTHI
ENDIF
#XNOTHI
' If the x-axis joystick is turned on, set the x-jog
IF (@IN[8]=0)
  JGX=((xangle*xangle*xangle*550300)-(xangle*1326))
ELSE
  xjoy=0
  JGX=0
ENDIF
'
' Check if the y-axis joystick is moved out of the deadzone
IF (@ABS[yangle]>joydzone)
  yjoy=1
  JP#YNOTLOW
ELSE
  yjoy=0
  yangle=0
ENDIF
' Check if the x-axis joystick is pushed past the high-level
#YNOTLOW
IF (@ABS[yangle]>joyhzone)
  yangle=joyhzone*yangle/@ABS[yangle]
ELSE
  JP#YNOTHI
ENDIF
#YNOTHI
' If the y-axis joystick is turned on, set the y-jog
IF (@IN[7]=0)
  JGY=((yangle*yangle*yangle*550300)-(yangle*1326))
ELSE
  yjoy=0
  JGY=0
ENDIF
IF ((xjoy=1)|(yjoy=1))
  usermove=1
ENDIF
JP#LOOP,((@ABS[xangle]>0.1)|(@ABS[yangle]>0.1))
JP#SETORIG,@IN[6]=0
JP#HOME,@IN[17]=0
'
'
#PADLOOP
a3=@AN[3]
IF (a3<0)
  a3=0
ENDIF
IF (a3>5)
  a3=5
ENDIF
IF (a3<0.68)
  jogspd=10
ENDIF
IF ((a3>=0.68)&(a3<2.54))
  jogspd=(48.39*a3)-22.9
ENDIF
IF (a3>=2.54)
  jogspd=(26450*a3*a3*a3)-(201500*a3*a3)+(514400*a3)-439916
ENDIF
'If we are pressing a button, marks this
IF ((@IN[2]=0)|(@IN[3]=0)|(@IN[4]=0)|(@IN[5]=0))
usermove=1
ENDIF
IF (@IN[2]=0)
  JG 0,jogspd;JP#PADLOOP
ENDIF
IF (@IN[3]=0)
  JG 0,-jogspd;JP#PADLOOP
ENDIF
IF (@IN[4]=0)
  JG -jogspd,0;JP#PADLOOP
ENDIF
IF (@IN[5]=0)
  JG jogspd,0;JP#PADLOOP
ENDIF
' If the origin shift button is not pressed, go back to loop
JP#LOOP,@IN[1]=1
ST
MC
' If the user moved the stage, measure the current position
IF (usermove=1)
    ' If we are in the camera view, set the current offest position
  IF (oncam=1)
    currposx=_TPA
    currposy=_TPB
  ELSE ;' If we are in the laser view, set the current offest position
    currposx=_TPA-deltax
    currposy=_TPB-deltay
  ENDIF
  usermove=0 ;' Reset the usermove flag
ENDIF
' If we are in the camera view, origin shift to laser view
IF (oncam=1)
   JS#HOMELAS
ELSE ;' If we are in the laser view, origin shift to camera view
  IF (oncam=0)
    JS#HOMECAM
  ENDIF
ENDIF
JG 0,0
BG X,Y
JP#LOOP
'
'
' MOVE TO HOME POSITION IN LASER VIEW
#HOMELAS
homedx=deltax
homedy=deltay
JS#HOMEMOV
oncam=0 ;' Mark that we are not under the camera
CB 1    ;' Turn off the "CAM VIEW" light.
EN
'
'
' MOVE TO HOME POSITION IN CAMERA VIEW
#HOMECAM
homedx=0
homedy=0
JS#HOMEMOV
oncam=1 ;' Mark that we are under the camera
SB 1    ;' Turn on the "CAM VIEW" light
EN
'
'
#HOMEMOV
LM XY
VS 400000;VA 1000000;VD 1000000;
curx=_TPA  ;' Save current position.
cury=_TPB
' Move offset amount (considering your current location)
' and overshooting 0.5mm in both directions on purpose.
LI homedx+currposx-curx-500,homedy+currposy-cury-500
LE;BGS ;' End input of LI commands, and begin sequence.
MC     ;' Wait until movement is complete.
WT 200 ;' This delay (in ms) is to allow for settling.
' Next we measure where we are using the encoders, and
' overshoot by 0.2mm the other direction.
IF (limithit=0)
actx=_TPA
acty=_TPB
VS 40000;VA 200000;VD 200000 ;' Move slower
ST;MC;LM XY
LI (homedx+currposx-actx+200),(homedy+currposy-acty+200)
LE;BGS;MC
WT 50
ENDIF
' Next we measure where we are again and overshoot by 0.1 mm.
IF (limithit=0)
actx=_TPA
acty=_TPB
ST;MC;LM XY
LI (homedx+currposx-actx-100),(homedy+currposy-acty-100)
LE;BGS;MC
WT 20
ENDIF
' Next we measure where we are again and overshoot by 0.05 mm.
IF (limithit=0)
actx=_TPA
acty=_TPB
ST;MC;LM XY
LI (homedx+currposx-actx+50),(homedy+currposy-acty+50)
LE;BGS;MC
WT 20
ENDIF
' Next we measure where we are again and overshoot by 0.02 mm.
IF (limithit=0)
actx=_TPA
acty=_TPB
ST;MC;LM XY
LI (homedx+currposx-actx-20),(homedy+currposy-acty-20)
LE;BGS;MC
WT 20
ENDIF
' Next we measure where we are again and move slowly to the
' actual desired positon.
IF (limithit=0)
actx=_TPA
acty=_TPB
VS 10000;VA 200000;VD 200000 ;' Move even slower
ST;MC;LM XY
LI (homedx+currposx-actx),(homedy+currposy-acty)
LE;BGS;MC
WT 20
ENDIF
' If the endstop is hit, flash all the lights
IF (limithit=1)
  loopnum=0
  JS#FLASHAL
ENDIF
limithit=0
EN
'
'
#HOME
btntime=TIME
ST
MC
#WAIT2
JP#WAIT2,@IN[17]=0
currtime=TIME
difftime=currtime-btntime
IF (difftime>=2000)
  JP#HOMEXY
ENDIF
'
LM XY
' If we are in the camera view, move to (0,0)
currposx=0
currposy=0
usermove=0
IF (oncam=1)
  JS#HOMECAM
' Otherwise, if we are in the laser view, move to (deltax, deltay)
ELSE
  JS#HOMELAS
ENDIF
JG 0,0
BG X,Y
JP#LOOP
'
'
#HOMEXY
homing=1
JG ;' Make sure we are in jog mode.
JP#LOOP,@IN[17]=0
JG -400000,0;
BG X,Y
JP#HOMEXY,limithit=0
MG "X-Axis is homed"
ST
MC
LM XY
cury=_TPB
DP xcamhome,0
DE xcamhome,0
JS#HOMECAM
homing=0
limithit=0
usermove=0
JG 0,0
BG X,Y
JP#LOOP
'
'
#SETORIG
btntime=TIME
ST
MC
#WAIT
JP#WAIT,@IN[6]=0
currtime=TIME
difftime=currtime-btntime
IF (difftime>=2000)
  JS#SETDEL
ENDIF
DP 0,0
DE 0,0
IF (oncam=1)
  DP 0,0
  DE 0,0
ELSE
  DP deltax,deltay
  DE deltax,deltay
ENDIF
bit2=@OUT[2]
bit3=@OUT[3]
CB 2;CB 3
usermove=0
loopnum=0
'
'
#FLASH
bit2=@OUT[2]
bit3=@OUT[3]
SB 2;SB 3
WT 50
CB 2;CB 3
WT 30
loopnum=loopnum+1
JP#FLASH,loopnum<3
IF bit2=1;SB 2;ENDIF
IF bit3=1;SB 3;ENDIF
'
'
JG 0,0
BG X,Y
JP#LOOP
EN
'
'
#FLASH2
bit2=@OUT[2]
bit3=@OUT[3]
SB 2;SB 3
WT 50
CB 2;CB 3
WT 50
loopnum=loopnum+1
JP#FLASH2,loopnum<6
IF bit2=1;SB 2;ENDIF
IF bit3=1;SB 3;ENDIF
WT 300
EN
'
'
#FLASH3
bit2=@OUT[2]
bit3=@OUT[3]
SB 2;SB 3
WT 300
CB 2;CB 3
WT 300
loopnum=loopnum+1
JP#FLASH3,loopnum<5
IF bit2=1;SB 2;ENDIF
IF bit3=1;SB 3;ENDIF
WT 300
EN
'
'
#FLASHX
bit2=@OUT[2]
SB 2
WT 300
CB 2
WT 300
loopnum=loopnum+1
JP#FLASHX,loopnum<3
IF bit2=1;SB 2;ENDIF
WT 300
EN
'
'
#FLASHY
bit3=@OUT[3]
SB 3
WT 300
CB 3
WT 300
loopnum=loopnum+1
JP#FLASHY,loopnum<3
IF bit3=1;SB 3;ENDIF
WT 300
EN
'
'
#FLASHAL
bit2=@OUT[2]
bit3=@OUT[3]
SB 1;SB 2;SB 3
WT 300
CB 1;CB 2;CB 3
WT 300
loopnum=loopnum+1
JP#FLASHAL,loopnum<5
IF bit2=1;SB 2;ENDIF
IF bit3=1;SB 3;ENDIF
WT 300
EN
'
'
#SETDEL
curx=_TPA  ;' Save current position.
cury=_TPB
MG ""
IF (oncam=1) ;' If we are in camera view...
  deltax = deltax-curx
  deltay = deltay-cury
  MG "Delta Offsets Updated:"
  MG deltax
  MG deltay
  loopnum=0
  JS#FLASH2
ELSE
  MG "Move to 'Camera View' to update delta Offsets"
  loopnum=0
  JP#FLASH3
ENDIF
EN
'
'
'
#LIMSWI
limithit=1
VS 400000;VA 4000000;VD 4000000;
DC 10000000,10000000
ST
MC
DC 2000000,2000000
SP 200000,200000
IF (_LFX=0)
  NO MG "+X limit hit!"
  SB 2
  PR -70000,0;BGX;MC
  IF(homing=0)
    loopnum=0
    JS#FLASHX
  ENDIF
ENDIF
IF (_LRX=0)
  NO MG "-X limit hit!"
  SB 2
  PR 70000,0;BGX;MC
  IF(homing=0)
    loopnum=0
    JS#FLASHX
  ENDIF
ENDIF
IF (_LFY=0)
  NO MG "+Y limit hit!"
  SB 3
  PR 0,-70000;BGY;MC
  IF(homing=0)
    loopnum=0
    JS#FLASHY
  ENDIF
ENDIF
IF (_LRY=0)
  NO MG "-Y limit hit!"
  SB 3
  PR 0,70000;BGY;MC
  IF(homing=0)
    loopnum=0
    JS#FLASHY
  ENDIF
ENDIF
WT 100
CB 2
CB 3
JG 0,0
BG XY
RE